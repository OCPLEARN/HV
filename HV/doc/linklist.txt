=============  SPRING  ================

datasource in spring
https://www.surasint.com/spring-boot-with-multiple-databases-example/

ant Matchers
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.html

Validation nach JSR 303 
https://www.baeldung.com/spring-custom-validation-message-source (mit eigenen messages files für localization)
https://medium.com/@grokwich/spring-boot-thymeleaf-html-form-handling-part-2-b4c9e83a189c

https://beanvalidation.org/1.0/spec/#validationapi-message

Javax Annotation @Size etc, Customize Validation Message:
https://docs.oracle.com/javaee/6/tutorial/doc/gkahi.html


==== UTF 8 Probleme ====

hier solution 3
https://stackoverflow.com/questions/31143923/eclipse-wrong-java-properties-utf-8-encoding
propteries file öffnen -> edit -> Set encoding - > utf8 (datei reparieren und neu laden)

=== Password REGEX  ===

https://regexr.com/
our Pattern:

^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&§():;<>,.?/~_+\\-=|'´`]).{1,}$

Besonderheit: 	.{1,} -> mindestens 1 Zeichen
				.{1} -> genau 1 Zeichen
				.{8, 128} -> mindestens 8 maximal 128 Zeichen

				Die Regex braucht eine Längenangabe,
				Da wir 4 Gruppen haben und aus jeder mind. 1 Zeichen brauchen, müsste die Längenangabe eigtl. .{4,} sein
				Wir wollen die Fehlermessages für Länge und Zeichenart getrennt halten, deswegen
				.{1,} -> mindestens 1 Zeichen
				=> keine Prüfung auf die Länge des Passworts. Das wird komplett im @Size erledigt
				

^(?=.*[0-9]{1})(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&§():;<>,.?/~_+\-=|'´`]).{8,128}$



^start expression
$ end expression
(?=) positive Lookahead muss enthalten sein, 
(?!) negative Lookahead darf nicht enthalten sein
.*  mindestens eins oder mehr
[]	ZeichenGruppe
{}	Anzahl Zeichen {min} bzw. {min, max} je Gruppe bzw. für den gesamten Ausdruck



==== Test Order ====
https://www.baeldung.com/junit-5-test-order